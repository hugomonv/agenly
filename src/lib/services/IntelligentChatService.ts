import { OpenAIService } from './OpenAIService';
import { HybridAgentService } from './HybridAgentService';
import TestDeploymentService from './TestDeploymentService';
import AdvancedPromptService from './AdvancedPromptService';
import { chatSessionService } from './ChatSessionService';

interface ChatRequest {
  message: string;
  conversationId?: string;
  userId: string;
  agentId?: string;
  businessType?: string;
  context?: any;
}

interface ChatResponse {
  success: boolean;
  message?: string;
  agentId?: string;
  suggestions?: string[];
  error?: string;
}

/**
 * Service de chat intelligent qui utilise les nouveaux services avanc√©s
 */
export class IntelligentChatService {
  private static instance: IntelligentChatService;
  private openaiService: OpenAIService;
  private agentService: HybridAgentService;

  private constructor() {
    this.openaiService = new OpenAIService();
    this.agentService = HybridAgentService.getInstance();
  }

  public static getInstance(): IntelligentChatService {
    if (!IntelligentChatService.instance) {
      IntelligentChatService.instance = new IntelligentChatService();
    }
    return IntelligentChatService.instance;
  }

  /**
   * Traiter une demande de chat intelligemment
   */
  async processChatRequest(request: ChatRequest): Promise<ChatResponse> {
    try {
      console.log('ü§ñ Traitement intelligent de la demande:', request.message);

      // 1. R√©cup√©rer ou cr√©er la session
      const session = chatSessionService.getOrCreateSession(request.userId, request.conversationId);
      console.log('üì± Session:', session.sessionId, 'Contexte:', session.context);

      // 2. Analyser l'intention de l'utilisateur avec le contexte
      const intent = await this.analyzeUserIntentWithContext(request.message, session.context);
      console.log('üéØ Intention d√©tect√©e:', intent);

      // 3. Ajouter le message utilisateur √† l'historique
      chatSessionService.addMessage(session.sessionId, 'user', request.message);

      // 4. Si l'utilisateur veut cr√©er un agent, utiliser le service avanc√©
      if (intent.type === 'create_agent') {
        const response = await this.handleAgentCreation(request, intent);
        // Mettre √† jour le contexte de la session
        if (response.success && response.agentId) {
          chatSessionService.setCurrentAgent(session.sessionId, response.agentId);
          chatSessionService.updateContext(session.sessionId, {
            businessType: intent.extractedInfo?.businessType,
            objectives: intent.extractedInfo?.objectives,
            features: intent.extractedInfo?.features
          });
        }
        // Ajouter la r√©ponse √† l'historique
        if (response.message) {
          chatSessionService.addMessage(session.sessionId, 'assistant', response.message);
        }
        return response;
      }

      // 5. Si l'utilisateur veut personnaliser l'agent existant
      if (intent.type === 'personalize_agent') {
        return await this.handleAgentPersonalization(request, intent, session);
      }

      // 6. Si l'utilisateur veut d√©ployer l'agent
      if (intent.type === 'deploy_agent') {
        return await this.handleAgentDeployment(request, intent, session);
      }

      // 7. Si l'utilisateur veut int√©grer des services
      if (intent.type === 'integrate_services') {
        return await this.handleServiceIntegration(request, intent, session);
      }

      // 8. Si l'utilisateur veut tester un agent existant
      if (request.agentId || session.currentAgentId) {
        return await this.handleAgentChat(request, session.currentAgentId);
      }

      // 4. Si l'utilisateur veut des informations g√©n√©rales
      if (intent.type === 'general_info') {
        return await this.handleGeneralInquiry(request, intent);
      }

      // 5. V√©rifier si c'est une suggestion de l'interface
      if (request.message.includes('Ajouter des informations sur mon restaurant') || 
          request.message.includes('ajouter des informations') ||
          request.message.includes('informations sur mon restaurant') ||
          request.message.includes('personnaliser votre agent') ||
          request.message.includes('Connecter avec Google Calendar') ||
          request.message.includes('connecter avec google') ||
          request.message.includes('D√©ployer sur mon site web') ||
          request.message.includes('d√©ployer sur mon site')) {
        return await this.handleGeneralInquiry(request, intent);
      }

      // 6. Par d√©faut, proposer de cr√©er un agent
      return await this.handleDefaultResponse(request);

    } catch (error) {
      console.error('‚ùå Erreur dans le service de chat intelligent:', error);
      return {
        success: false,
        error: 'Erreur lors du traitement de votre demande'
      };
    }
  }

  /**
   * Analyser l'intention de l'utilisateur avec contexte
   */
  private async analyzeUserIntentWithContext(message: string, context: any): Promise<any> {
    // Si on a d√©j√† un contexte, utiliser une analyse plus intelligente
    if (context.businessType || context.currentAgentId) {
      return this.analyzeUserIntentWithExistingContext(message, context);
    }
    
    return this.analyzeUserIntent(message);
  }

  /**
   * Analyser l'intention avec un contexte existant
   */
  private async analyzeUserIntentWithExistingContext(message: string, context: any): Promise<any> {
    const analysisPrompt = `
Analyse cette demande utilisateur en tenant compte du contexte existant :

Message: "${message}"

Contexte existant :
- Type d'entreprise: ${context.businessType || 'non d√©fini'}
- Objectifs: ${context.objectives || 'non d√©finis'}
- Fonctionnalit√©s: ${context.features?.join(', ') || 'non d√©finies'}
- Agent actuel: ${context.currentAgentId || 'aucun'}

Types d'intention possibles :
- create_agent: L'utilisateur veut cr√©er un nouvel agent IA
- personalize_agent: L'utilisateur veut personnaliser l'agent existant
- deploy_agent: L'utilisateur veut d√©ployer l'agent
- integrate_services: L'utilisateur veut int√©grer des services
- test_agent: L'utilisateur veut tester l'agent
- general_info: L'utilisateur demande des informations g√©n√©rales

R√©ponds uniquement avec un JSON :
{
  "type": "create_agent|personalize_agent|deploy_agent|integrate_services|test_agent|general_info",
  "businessType": "${context.businessType || 'restaurant'}",
  "confidence": 0.95,
  "extractedInfo": {
    "businessType": "${context.businessType || 'restaurant'}",
    "objectives": "objectifs mis √† jour ou existants",
    "features": ["fonctionnalit√©s demand√©es ou existantes"]
  }
}`;

    try {
      const completion = await this.openaiService.generateCompletion([
        { role: 'system', content: 'Tu es un expert en analyse d\'intention utilisateur avec contexte. R√©ponds uniquement avec du JSON valide.' },
        { role: 'user', content: analysisPrompt }
      ], { model: 'gpt-4', temperature: 0.3, max_tokens: 500 });

      return JSON.parse(completion);
    } catch (error) {
      console.error('Erreur analyse intention avec contexte:', error);
      return {
        type: 'personalize_agent',
        businessType: context.businessType || 'restaurant',
        confidence: 0.5,
        extractedInfo: {
          businessType: context.businessType || 'restaurant',
          objectives: context.objectives || 'support client',
          features: context.features || ['support client']
        }
      };
    }
  }

  /**
   * Analyser l'intention de l'utilisateur avec IA
   */
  private async analyzeUserIntent(message: string): Promise<any> {
    const analysisPrompt = `
Analyse cette demande utilisateur et d√©termine l'intention :

Message: "${message}"

Types d'intention possibles :
- create_agent: L'utilisateur veut cr√©er un nouvel agent IA
- test_agent: L'utilisateur veut tester un agent existant
- general_info: L'utilisateur demande des informations g√©n√©rales
- deployment: L'utilisateur veut d√©ployer un agent
- integration: L'utilisateur veut int√©grer des services

Si c'est create_agent, extrais aussi :
- businessType: type d'entreprise (restaurant, e-commerce, support, etc.)
- objectives: objectifs principaux
- features: fonctionnalit√©s demand√©es

R√©ponds uniquement avec un JSON :
{
  "type": "create_agent|test_agent|general_info|deployment|integration",
  "businessType": "restaurant|ecommerce|healthcare|etc",
  "confidence": 0.95,
  "extractedInfo": {
    "businessType": "restaurant cor√©en",
    "objectives": "gestion des r√©servations",
    "features": ["r√©servations", "menu", "support client"]
  }
}`;

    try {
      const completion = await this.openaiService.generateCompletion([
        { role: 'system', content: 'Tu es un expert en analyse d\'intention utilisateur. R√©ponds uniquement avec du JSON valide.' },
        { role: 'user', content: analysisPrompt }
      ], { model: 'gpt-4', temperature: 0.3, max_tokens: 500 });

      return JSON.parse(completion);
    } catch (error) {
      console.error('Erreur analyse intention:', error);
      return {
        type: 'create_agent',
        businessType: 'restaurant',
        confidence: 0.5,
        extractedInfo: {
          businessType: 'restaurant',
          objectives: 'support client',
          features: ['support client']
        }
      };
    }
  }

  /**
   * G√©rer la cr√©ation d'un agent
   */
  private async handleAgentCreation(request: ChatRequest, intent: any): Promise<ChatResponse> {
    try {
      console.log('üöÄ Cr√©ation d\'agent avec les services avanc√©s');

      const extractedInfo = intent.extractedInfo;
      const agentName = this.generateAgentName(extractedInfo.businessType);
      
      // Utiliser le service de g√©n√©ration d'agents avanc√©
      const agentGenerationService = await import('./AgentGenerationService');
      
      const result = await agentGenerationService.agentGenerationService.generateAgent({
        businessType: extractedInfo.businessType,
        name: agentName,
        objectives: extractedInfo.objectives || `G√©rer efficacement les ${extractedInfo.businessType}`,
        features: extractedInfo.features || ['support client', 'r√©servations'],
        personality: 'Professionnel, chaleureux et efficace',
        userId: request.userId
      });

      if (result.success && result.agent) {
        return {
          success: true,
          message: `üéâ Excellent ! J'ai cr√©√© votre agent "${agentName}" sp√©cialis√© pour votre ${extractedInfo.businessType}. 

Votre agent peut maintenant :
${extractedInfo.features?.map(f => `‚Ä¢ ${f}`).join('\n') || '‚Ä¢ Support client\n‚Ä¢ Gestion des r√©servations'}

**Prochaines √©tapes :**

1Ô∏è‚É£ **Personnaliser votre agent** - Voulez-vous ajouter des informations sp√©cifiques sur votre restaurant (menu, horaires, sp√©cialit√©s) ?

2Ô∏è‚É£ **Int√©grations** - Souhaitez-vous connecter votre agent avec :
   ‚Ä¢ Google Calendar (pour les r√©servations)
   ‚Ä¢ Gmail (pour les confirmations)
   ‚Ä¢ Votre site web existant

3Ô∏è‚É£ **D√©ploiement** - Comment voulez-vous d√©ployer votre agent :
   ‚Ä¢ Sur votre site web
   ‚Ä¢ En widget flottant
   ‚Ä¢ En page d√©di√©e

Dites-moi ce qui vous int√©resse le plus !`,
          agentId: result.agent.id,
          suggestions: [
            'Ajouter des informations sur mon restaurant',
            'Connecter avec Google Calendar',
            'D√©ployer sur mon site web',
            'Tester l\'agent maintenant'
          ]
        };
      } else {
        return {
          success: false,
          error: 'Erreur lors de la cr√©ation de l\'agent. Veuillez r√©essayer.'
        };
      }
    } catch (error) {
      console.error('Erreur cr√©ation agent:', error);
      return {
        success: false,
        error: 'Erreur lors de la cr√©ation de l\'agent'
      };
    }
  }

  /**
   * G√©rer la personnalisation d'un agent existant
   */
  private async handleAgentPersonalization(request: ChatRequest, intent: any, session: any): Promise<ChatResponse> {
    if (!session.currentAgentId) {
      return {
        success: false,
        error: 'Aucun agent cr√©√©. Veuillez d\'abord cr√©er un agent.'
      };
    }

    // Mettre √† jour le contexte avec les nouvelles informations
    chatSessionService.updateContext(session.sessionId, {
      businessType: intent.extractedInfo?.businessType || session.context.businessType,
      objectives: intent.extractedInfo?.objectives || session.context.objectives,
      features: intent.extractedInfo?.features || session.context.features
    });

    return {
      success: true,
      message: `Parfait ! J'ai mis √† jour les informations de votre agent "${session.context.businessType || 'restaurant'}".

**Informations mises √† jour :**
‚Ä¢ Type d'entreprise: ${intent.extractedInfo?.businessType || session.context.businessType}
‚Ä¢ Objectifs: ${intent.extractedInfo?.objectives || session.context.objectives}
‚Ä¢ Fonctionnalit√©s: ${intent.extractedInfo?.features?.join(', ') || session.context.features?.join(', ')}

Que souhaitez-vous faire maintenant ?`,
      agentId: session.currentAgentId,
      suggestions: [
        'Connecter avec Google Calendar',
        'D√©ployer sur mon site web',
        'Tester l\'agent maintenant',
        'Ajouter plus d\'informations'
      ]
    };
  }

  /**
   * G√©rer le d√©ploiement d'un agent
   */
  private async handleAgentDeployment(request: ChatRequest, intent: any, session: any): Promise<ChatResponse> {
    if (!session.currentAgentId) {
      return {
        success: false,
        error: 'Aucun agent cr√©√©. Veuillez d\'abord cr√©er un agent.'
      };
    }

    return {
      success: true,
      message: `Excellent ! Je vais vous aider √† d√©ployer votre agent "${session.context.businessType || 'restaurant'}" sur votre site web.

**Options de d√©ploiement disponibles :**

1Ô∏è‚É£ **Widget flottant** - Bouton de chat en bas √† droite
2Ô∏è‚É£ **Page d√©di√©e** - Page compl√®te avec votre agent  
3Ô∏è‚É£ **Int√©gration compl√®te** - Int√©gr√© dans votre design existant

**√âtapes :**
‚Ä¢ G√©n√©ration du code d'int√©gration
‚Ä¢ Personnalisation du design
‚Ä¢ Test en temps r√©el
‚Ä¢ Mise en ligne

Quelle option pr√©f√©rez-vous ?`,
      agentId: session.currentAgentId,
      suggestions: [
        'Widget flottant',
        'Page d√©di√©e', 
        'Int√©gration compl√®te',
        'Voir un aper√ßu'
      ],
      action: 'show_deployment_options'
    };
  }

  /**
   * G√©rer l'int√©gration de services
   */
  private async handleServiceIntegration(request: ChatRequest, intent: any, session: any): Promise<ChatResponse> {
    if (!session.currentAgentId) {
      return {
        success: false,
        error: 'Aucun agent cr√©√©. Veuillez d\'abord cr√©er un agent.'
      };
    }

    return {
      success: true,
      message: `Parfait ! Connectons votre agent "${session.context.businessType || 'restaurant'}" avec vos outils pr√©f√©r√©s.

**Int√©grations disponibles :**

üîó **Google Calendar** - G√©rer les r√©servations automatiquement
üìß **Gmail** - Envoyer des confirmations par email
‚òÅÔ∏è **Google Drive** - Sauvegarder les donn√©es clients
üì± **WhatsApp Business** - Notifications SMS et WhatsApp

**Avantages :**
‚Ä¢ Automatisation compl√®te des r√©servations
‚Ä¢ Confirmations automatiques
‚Ä¢ Synchronisation des donn√©es
‚Ä¢ Notifications en temps r√©el

Quelle int√©gration vous int√©resse ?`,
      agentId: session.currentAgentId,
      suggestions: [
        'Connecter Google Calendar',
        'Configurer Gmail',
        'Int√©grer Google Drive',
        'Activer WhatsApp'
      ],
      action: 'show_integration_options'
    };
  }

  /**
   * G√©rer le chat avec un agent existant
   */
  private async handleAgentChat(request: ChatRequest, agentId?: string): Promise<ChatResponse> {
    try {
      const targetAgentId = agentId || request.agentId;
      if (!targetAgentId) {
        return {
          success: false,
          error: 'Aucun agent sp√©cifi√© pour le chat'
        };
      }

      // R√©cup√©rer l'agent
      let agent = await TestDeploymentService.getAgentById(targetAgentId);
      if (!agent) {
        agent = await this.agentService.getAgentById(targetAgentId);
      }

      if (!agent) {
        return {
          success: false,
          error: 'Agent non trouv√©'
        };
      }

      // Utiliser l'agent pour r√©pondre
      const response = await this.openaiService.generateCompletion([
        { role: 'system', content: agent.system_prompt },
        { role: 'user', content: request.message }
      ], { model: 'gpt-4', temperature: 0.7, max_tokens: 1000 });

      return {
        success: true,
        message: response,
        agentId: agent.id
      };
    } catch (error) {
      console.error('Erreur chat agent:', error);
      return {
        success: false,
        error: 'Erreur lors de la communication avec l\'agent'
      };
    }
  }

  /**
   * G√©rer les demandes d'informations g√©n√©rales
   */
  private async handleGeneralInquiry(request: ChatRequest, intent: any): Promise<ChatResponse> {
    console.log('üîç Message re√ßu pour suggestion:', request.message);
    // V√©rifier si c'est une suggestion de l'interface
    if (request.message.includes('Ajouter des informations sur mon restaurant') || 
        request.message.includes('ajouter des informations') ||
        request.message.includes('informations sur mon restaurant') ||
        request.message.includes('personnaliser votre agent')) {
      return {
        success: true,
        message: `Parfait ! Pour personnaliser votre agent avec les informations de votre restaurant, j'ai besoin de quelques d√©tails :

**Informations sur votre restaurant :**
‚Ä¢ Nom de votre restaurant
‚Ä¢ Type de cuisine (cor√©enne, fran√ßaise, italienne, etc.)
‚Ä¢ Sp√©cialit√©s du chef
‚Ä¢ Horaires d'ouverture
‚Ä¢ Adresse et contact
‚Ä¢ Capacit√© d'accueil
‚Ä¢ Services sp√©ciaux (terrasse, parking, etc.)

**Menu et tarifs :**
‚Ä¢ Plats signature
‚Ä¢ Prix moyens
‚Ä¢ Menu d√©gustation (si applicable)
‚Ä¢ Options v√©g√©tariennes/v√©g√©taliennes

Dites-moi ces informations et je vais les int√©grer dans votre agent !`,
        suggestions: [
          'Mon restaurant s\'appelle...',
          'Nous servons de la cuisine...',
          'Nos sp√©cialit√©s sont...',
          'Nous sommes ouverts...'
        ]
      };
    }

    if (request.message.includes('Connecter avec Google Calendar') || request.message.includes('connecter avec google')) {
      return {
        success: true,
        message: `Excellente id√©e ! Connecter votre agent avec Google Calendar permettra de :

**Fonctionnalit√©s automatiques :**
‚Ä¢ V√©rifier la disponibilit√© en temps r√©el
‚Ä¢ Cr√©er des r√©servations directement dans votre agenda
‚Ä¢ Envoyer des confirmations automatiques
‚Ä¢ G√©rer les annulations et modifications

**Configuration n√©cessaire :**
‚Ä¢ Compte Google Business
‚Ä¢ Autorisation d'acc√®s au calendrier
‚Ä¢ Configuration des cr√©neaux disponibles

Voulez-vous que je vous guide dans la configuration de cette int√©gration ?`,
        suggestions: [
          'Oui, configurer Google Calendar',
          'Voir d\'autres int√©grations',
          'D√©ployer d\'abord l\'agent'
        ],
        action: 'show_integration_options'
      };
    }

    if (request.message.includes('D√©ployer sur mon site web') || request.message.includes('d√©ployer sur mon site')) {
      return {
        success: true,
        message: `Parfait ! Je vais vous aider √† d√©ployer votre agent sur votre site web.

**Options de d√©ploiement :**

1Ô∏è‚É£ **Widget flottant** - Bouton de chat en bas √† droite
2Ô∏è‚É£ **Page d√©di√©e** - Page compl√®te avec votre agent
3Ô∏è‚É£ **Int√©gration compl√®te** - Int√©gr√© dans votre design existant

**√âtapes :**
‚Ä¢ G√©n√©ration du code d'int√©gration
‚Ä¢ Personnalisation du design
‚Ä¢ Test en temps r√©el
‚Ä¢ Mise en ligne

Quelle option pr√©f√©rez-vous ?`,
        suggestions: [
          'Widget flottant',
          'Page d√©di√©e',
          'Int√©gration compl√®te',
          'Voir un aper√ßu'
        ],
        action: 'show_deployment_options'
      };
    }

    const response = await this.openaiService.generateCompletion([
      { 
        role: 'system', 
        content: `Tu es un assistant IA expert en cr√©ation d'agents intelligents. Tu aides les utilisateurs √† cr√©er des chatbots personnalis√©s pour leur entreprise. Tu es professionnel, utile et enthousiaste.` 
      },
      { role: 'user', content: request.message }
    ], { model: 'gpt-4', temperature: 0.7, max_tokens: 1000 });

    return {
      success: true,
      message: response,
      suggestions: [
        'Cr√©er un agent pour mon restaurant',
        'Cr√©er un agent pour mon e-commerce',
        'Voir mes agents existants',
        'Apprendre √† d√©ployer un agent'
      ]
    };
  }

  /**
   * R√©ponse par d√©faut
   */
  private async handleDefaultResponse(request: ChatRequest): Promise<ChatResponse> {
    return {
      success: true,
      message: `Bonjour ! Je suis votre assistant IA sp√©cialis√© dans la cr√©ation d'agents intelligents. 

Je peux vous aider √† cr√©er un chatbot personnalis√© pour votre entreprise. Dites-moi simplement :
‚Ä¢ Quel type d'entreprise vous avez
‚Ä¢ Quelles t√¢ches vous voulez automatiser
‚Ä¢ Vos objectifs principaux

Par exemple : "J'ai un restaurant cor√©en et j'aimerais cr√©er un chatbot qui puisse g√©rer les r√©servations"`,
      suggestions: [
        'Cr√©er un agent pour mon restaurant',
        'Cr√©er un agent pour mon e-commerce', 
        'Cr√©er un agent pour mon service client',
        'Voir des exemples d\'agents'
      ]
    };
  }

  /**
   * G√©n√©rer un nom d'agent intelligent
   */
  private generateAgentName(businessType: string): string {
    const names = {
      'restaurant': ['Assistant Restaurant Premium', 'Expert Culinaire IA', 'Gestionnaire de R√©servations'],
      'ecommerce': ['Assistant E-commerce Pro', 'Expert Ventes IA', 'Conseiller Produits'],
      'healthcare': ['Assistant Sant√© Certifi√©', 'Expert M√©dical IA', 'Conseiller Bien-√™tre'],
      'default': ['Assistant IA Professionnel', 'Expert Business IA', 'Conseiller Intelligent']
    };

    const typeNames = names[businessType.toLowerCase()] || names.default;
    return typeNames[Math.floor(Math.random() * typeNames.length)];
  }
}

export const intelligentChatService = IntelligentChatService.getInstance();



