# Docker Compose configuration for AGENLY Platform

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: agenly-postgres
    environment:
      POSTGRES_DB: agenly_platform
      POSTGRES_USER: agenly
      POSTGRES_PASSWORD: agenly_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/database/init:/docker-entrypoint-initdb.d
    networks:
      - agenly-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agenly -d agenly_platform"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Base de données MongoDB
  mongodb:
    image: mongo:7.0
    container_name: agenly-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: agenly
      MONGO_INITDB_ROOT_PASSWORD: agenly_password
      MONGO_INITDB_DATABASE: agenly_agents
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./src/database/mongo-init:/docker-entrypoint-initdb.d
    networks:
      - agenly-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: agenly-redis
    command: redis-server --appendonly yes --requirepass agenly_redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agenly-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Queue Redis (Bull)
  redis-queue:
    image: redis:7-alpine
    container_name: agenly-redis-queue
    command: redis-server --appendonly yes --requirepass agenly_queue_password
    ports:
      - "6380:6379"
    volumes:
      - redis_queue_data:/data
    networks:
      - agenly-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Application Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: agenly-backend
    environment:
      NODE_ENV: production
      PORT: 3000
      
      # Base de données
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: agenly
      POSTGRES_PASSWORD: agenly_password
      POSTGRES_DB: agenly_platform
      
      MONGODB_URI: mongodb://agenly:agenly_password@mongodb:27017/agenly_agents?authSource=admin
      
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: agenly_redis_password
      REDIS_DB: 0
      
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_ORGANIZATION: ${OPENAI_ORGANIZATION}
      
      # Stripe
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      
      # Chiffrement
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - agenly-network
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Application Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: agenly-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://backend:3000/api/v1
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
    ports:
      - "3001:3000"
    networks:
      - agenly-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: agenly-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    networks:
      - agenly-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Worker pour les tâches asynchrones
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: agenly-worker
    environment:
      NODE_ENV: production
      
      # Base de données
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: agenly
      POSTGRES_PASSWORD: agenly_password
      POSTGRES_DB: agenly_platform
      
      MONGODB_URI: mongodb://agenly:agenly_password@mongodb:27017/agenly_agents?authSource=admin
      
      REDIS_HOST: redis-queue
      REDIS_PORT: 6379
      REDIS_PASSWORD: agenly_queue_password
      REDIS_DB: 0
      
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_ORGANIZATION: ${OPENAI_ORGANIZATION}
      
      # Monitoring
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ./logs:/app/logs
    networks:
      - agenly-network
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis-queue:
        condition: service_healthy
    restart: unless-stopped
    # deploy:
    #   replicas: 2

  # Monitoring avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: agenly-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - agenly-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana pour les dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: agenly-grafana
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - agenly-network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  redis_queue_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  agenly-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16




